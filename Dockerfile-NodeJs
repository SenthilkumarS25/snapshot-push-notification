# Use an Ubuntu base image
FROM ubuntu:20.04

# Install dependencies
RUN apt-get update && apt-get install -y \
    curl \
    unzip \
    openjdk-11-jdk \
    wget \
    libgl1-mesa-glx \
    lib32stdc++6 \
    lib32z1 \
    libssl-dev \
    python3-pip \
    build-essential \
    nodejs \
    npm \
    && apt-get clean

# Set environment variables for Android SDK installation
ENV ANDROID_HOME /opt/android-sdk
ENV PATH $ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH

# Download and install Android SDK command-line tools
RUN mkdir -p $ANDROID_HOME/cmdline-tools && \
    wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O /cmdline-tools.zip && \
    unzip /cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools && \
    mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest && \
    rm /cmdline-tools.zip

# Install Android SDK components
RUN yes | sdkmanager --sdk_root=$ANDROID_HOME --licenses && \
    sdkmanager --sdk_root=$ANDROID_HOME "platform-tools" "platforms;android-30" "emulator" "system-images;android-30;google_apis;x86_64"

# Create and configure a new AVD (Android Virtual Device)
RUN avdmanager create avd -n test_avd -k "system-images;android-30;google_apis;x86_64" --force && \
    echo "hw.cpu.ncore=2" >> $ANDROID_HOME/avd/test_avd.avd/config.ini && \
    echo "hw.ramSize=2048" >> $ANDROID_HOME/avd/test_avd.avd/config.ini

# Install Appium globally via npm
RUN npm install -g appium

# Copy your test scripts to the Docker image
WORKDIR /app
COPY . /app

# Expose the port for Appium server
EXPOSE 4723

# Start the Android emulator and Appium server
CMD emulator -avd test_avd -no-window -no-audio & \
    appium & \
    sleep 30 && \
    node your_test_script.js
